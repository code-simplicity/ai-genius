/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as WelcomeIndexImport } from './routes/welcome/index';
import { Route as HomeIndexImport } from './routes/home/index';
import { Route as AuthIndexImport } from './routes/auth/index';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const WelcomeIndexRoute = WelcomeIndexImport.update({
  id: '/welcome/',
  path: '/welcome/',
  getParentRoute: () => rootRoute,
} as any);

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/': {
      id: '/auth/';
      path: '/auth';
      fullPath: '/auth';
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/home/': {
      id: '/home/';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/welcome/': {
      id: '/welcome/';
      path: '/welcome';
      fullPath: '/welcome';
      preLoaderRoute: typeof WelcomeIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/auth': typeof AuthIndexRoute;
  '/home': typeof HomeIndexRoute;
  '/welcome': typeof WelcomeIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/auth': typeof AuthIndexRoute;
  '/home': typeof HomeIndexRoute;
  '/welcome': typeof WelcomeIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/auth/': typeof AuthIndexRoute;
  '/home/': typeof HomeIndexRoute;
  '/welcome/': typeof WelcomeIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/auth' | '/home' | '/welcome';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/auth' | '/home' | '/welcome';
  id: '__root__' | '/' | '/auth/' | '/home/' | '/welcome/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
  HomeIndexRoute: typeof HomeIndexRoute;
  WelcomeIndexRoute: typeof WelcomeIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  WelcomeIndexRoute: WelcomeIndexRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/",
        "/home/",
        "/welcome/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.ts"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/welcome/": {
      "filePath": "welcome/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
